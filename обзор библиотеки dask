# обзор на библиетеку dask
# для того чтобы запустить какую-либо библиотеку мы должны её импортировать командой (import)
# у каждой библиетеки есть свои функции
# Dask — это гибкая библиотека параллельных вычислений, которая обеспечивает распределённые вычисления и параллелизм
#  для крупномасштабной обработки данных.
# dask - это некое подобие pandas но более улучшенное в плане проъинятия обьёма данных
# или же Dask используется в ситуациях, когда Pandas терпит неудачу из-за размера данных или скорости вычислений:
# вот три аспекта которые важны в использовании dask:
# 1. Работа с большими наборами данных, даже если эти наборы данных не помещаются в памяти.
# 2. Ускорение длительных вычислений за счёт использования множества ядер.
# 3. Распределённые вычисления на больших наборах данных со стандартными операциями pandas
#  , такими как группировка, объединение и вычисления временных рядов.
# вот некоторые примеры с пояснениями функций dask
import dask.array as da
# здечь мы импортируем библиотеку
# Создаем большой массив Dask
massiv = da.random.random((10000, 10000), chunks=(1000, 1000))
# Здесь вы создаете случайный массив размером 10,000 на 10,000, разбитый на блоки по 1,
# 000 на 1,000. Это позволяет Dask эффективно управлять памятью и вычислениями.
# Выполняем некоторые вычисления
y = massiv + massiv.T
# Вы вычисляете сумму массива x и его транспонированной версии massive.T.
# Операция будет выполнена лениво — фактически, вычисления не произойдут до тех пор, пока вы не вызовете .compute().

# Вычисляем результат
result = y.mean().compute()
# Здесь вы берете среднее значение полученного массива
# y и вызываете .compute(), чтобы инициировать выполнение всех отложенных операций и получить результат.

print(result)
# Наконец, вы выводите результат на экран.
